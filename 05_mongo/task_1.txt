3.	Querying Restaurants Collection
Note: please use mongo shell for this task
Have a look at a document from the collection to get familiar with the schema:
db.restaurants.findOne()

Answer the following questions and include both query and the result (if applicable) into your report:
1.	How many “Chinese” (cuisine) restaurants are in “Queens” (borough)?
MongoDB Enterprise > db.restaurants.find( {borough: "Queens", cuisine: "Chinese" } ).count()
728

2.	What is the _id of the restaurant which has the grade with the highest ever score?
MongoDB Enterprise > db.restaurants.aggregate([ { $unwind: "$grades" }, { $group: { _id: "$_id", maxScore: { $max: "$grades.score" } } }, { $sort: { "maxScore": -1 } }, { $limit: 1 } ], { allowDiskUse: true } )
{ "_id" : ObjectId("5a5d03e33d041c665f258180"), "maxScore" : 131 }


3.	Add a grade { grade: "A", score: 7, date: ISODate() } to every restaurant in “Manhattan” (borough).
MongoDB Enterprise >  db.restaurants.updateMany( {borough: "Manhattan"}, {$addToSet: { grades: {  grade: "A", score: 7, date: ISODate() } }})
{ "acknowledged" : true, "matchedCount" : 10259, "modifiedCount" : 10259 }


4.	What are the names of the restaurants which have a grade at index 8 with score less then 7? Use projection to include only names without _id.
MongoDB Enterprise > db.restaurants.find({ $and: [ { "grades.8.score": { $lt: 7 } }, { "grades.8": { $exists: true } } ] }, {"_id": 0, "name": 1})
{ "name" : "Silver Krust West Indian Restaurant" }
{ "name" : "Pure Food" }

5.	What are _id and borough of “Seafood” (cuisine) restaurants  which received at least one “B” grade in period from 2014-02-01 to 2014-03-01? Use projection to include only _id and borough.
MongoDB Enterprise > db.restaurants.find({ "cuisine": "Seafood", grades: { $elemMatch: { "grade": "B", "date": { $gte: ISODate("2014-02-01T00:00:00.000+0000"), $lte: ISODate("2014-03-01T00:00:00.000+0000") } } } }, {"_id": 1, "borough": 1})
{ "_id" : ObjectId("5a5d03e43d041c665f25b58b"), "borough" : "Bronx" }
{ "_id" : ObjectId("5a5d03e43d041c665f25b802"), "borough" : "Manhattan" }


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


4.	Indexing Restaurants Collection
Note: you may use MongoDB Compass for this task if you want to
Create the following indexes:
1.	Create an index which will be used by this query and provide proof (from explain() or Compass UI) that the index is indeed used by the winning plan:
  db.restaurants.find({ name: "Glorious Food" })

db.restaurants.createIndex( { name: 1 } )
MongoDB Enterprise > db.restaurants.find({ name: "Glorious Food" }).explain()
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "name" : {
                                "$eq" : "Glorious Food"
                        }
                },
                "winningPlan" : {
                        "stage" : "FETCH",
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "name" : 1
                                },
                                "indexName" : "name_1",
                                "isMultiKey" : false,
                                "multiKeyPaths" : {
                                        "name" : [ ]
                                },
                                "isUnique" : false,
                                "isSparse" : false,
                                "isPartial" : false,
                                "indexVersion" : 2,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "name" : [
                                                "[\"Glorious Food\", \"Glorious Food\"]"
                                        ]
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-HQHM4EV",
                "port" : 27017,
                "version" : "3.6.2",
                "gitVersion" : "489d177dbd0f0420a8ca04d39fd78d0a2c539420"
        },
        "ok" : 1
}

2.	Drop index from task 4.1
MongoDB Enterprise > db.restaurants.dropIndex( { "name":1 } )
{ "nIndexesWas" : 2, "ok" : 1 }

3.	Create an index to make this query covered and provide proof (from explain() or Compass UI) that it is indeed covered:
db.restaurants.find({ restaurant_id: "41098650" }, { _id: 0, borough: 1 })
db.restaurants.createIndex( { restaurant_id: 1, _id: -1, borough: 1 } )
MongoDB Enterprise > db.restaurants.find({ restaurant_id: "41098650" }, { _id: 0, borough: 1 }).explain()
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "restaurant_id" : {
                                "$eq" : "41098650"
                        }
                },
                "winningPlan" : {
                        "stage" : "PROJECTION",
                        "transformBy" : {
                                "_id" : 0,
                                "borough" : 1
                        },
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "restaurant_id" : 1,
                                        "_id" : -1,
                                        "borough" : 1
                                },
                                "indexName" : "restaurant_id_1__id_-1_borough_1",
                                "isMultiKey" : false,
                                "multiKeyPaths" : {
                                        "restaurant_id" : [ ],
                                        "_id" : [ ],
                                        "borough" : [ ]
                                },
                                "isUnique" : false,
                                "isSparse" : false,
                                "isPartial" : false,
                                "indexVersion" : 2,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "restaurant_id" : [
                                                "[\"41098650\", \"41098650\"]"
                                        ],
                                        "_id" : [
                                                "[MaxKey, MinKey]"
                                        ],
                                        "borough" : [
                                                "[MinKey, MaxKey]"
                                        ]
                                }
                        }
                },
                "rejectedPlans" : [
                        {
                                "stage" : "PROJECTION",
                                "transformBy" : {
                                        "_id" : 0,
                                        "borough" : 1
                                },
                                "inputStage" : {
                                        "stage" : "IXSCAN",
                                        "keyPattern" : {
                                                "restaurant_id" : 1,
                                                "_id" : 1,
                                                "borough" : 1
                                        },
                                        "indexName" : "restaurant_id_1__id_1_borough_1",
                                        "isMultiKey" : false,
                                        "multiKeyPaths" : {
                                                "restaurant_id" : [ ],
                                                "_id" : [ ],
                                                "borough" : [ ]
                                        },
                                        "isUnique" : false,
                                        "isSparse" : false,
                                        "isPartial" : false,
                                        "indexVersion" : 2,
                                        "direction" : "forward",
                                        "indexBounds" : {
                                                "restaurant_id" : [
                                                        "[\"41098650\", \"41098650\"]"
                                                ],
                                                "_id" : [
                                                        "[MinKey, MaxKey]"
                                                ],
                                                "borough" : [
                                                        "[MinKey, MaxKey]"
                                                ]
                                        }
                                }
                        }
                ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-HQHM4EV",
                "port" : 27017,
                "version" : "3.6.2",
                "gitVersion" : "489d177dbd0f0420a8ca04d39fd78d0a2c539420"
        },
        "ok" : 1
}


4.	Create a partial index on cuisine field which will be used only when filtering on borough equal to “Staten Island”:
db.restaurants.createIndex( { cuisine: 1 }, { partialFilterExpression: { "borough": "Staten Island" } } )

db.restaurants.find({ borough: "Staten Island", cuisine: "American" }) – uses index
MongoDB Enterprise > db.restaurants.find({ borough: "Staten Island", cuisine: "American" }).explain()
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "$and" : [
                                {
                                        "borough" : {
                                                "$eq" : "Staten Island"
                                        }
                                },
                                {
                                        "cuisine" : {
                                                "$eq" : "American"
                                        }
                                }
                        ]
                },
                "winningPlan" : {
                        "stage" : "FETCH",
                        "filter" : {
                                "borough" : {
                                        "$eq" : "Staten Island"
                                }
                        },
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "cuisine" : 1
                                },
                                "indexName" : "cuisine_1",
                                "isMultiKey" : false,
                                "multiKeyPaths" : {
                                        "cuisine" : [ ]
                                },
                                "isUnique" : false,
                                "isSparse" : false,
                                "isPartial" : true,
                                "indexVersion" : 2,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "cuisine" : [
                                                "[\"American\", \"American\"]"
                                        ]
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-HQHM4EV",
                "port" : 27017,
                "version" : "3.6.2",
                "gitVersion" : "489d177dbd0f0420a8ca04d39fd78d0a2c539420"
        },
        "ok" : 1
}


db.restaurants.find({ borough: "Staten Island", name: "Bagel Land" }) – does not use index
MongoDB Enterprise > db.restaurants.find({ borough: "Staten Island", name: "Bagel Land" }).explain()
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "$and" : [
                                {
                                        "borough" : {
                                                "$eq" : "Staten Island"
                                        }
                                },
                                {
                                        "name" : {
                                                "$eq" : "Bagel Land"
                                        }
                                }
                        ]
                },
                "winningPlan" : {
                        "stage" : "COLLSCAN",
                        "filter" : {
                                "$and" : [
                                        {
                                                "borough" : {
                                                        "$eq" : "Staten Island"
                                                }
                                        },
                                        {
                                                "name" : {
                                                        "$eq" : "Bagel Land"
                                                }
                                        }
                                ]
                        },
                        "direction" : "forward"
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-HQHM4EV",
                "port" : 27017,
                "version" : "3.6.2",
                "gitVersion" : "489d177dbd0f0420a8ca04d39fd78d0a2c539420"
        },
        "ok" : 1
}

db.restaurants.find({ borough: "Queens", cuisine: "Pizza" }) – does not use index
MongoDB Enterprise > db.restaurants.find({ borough: "Queens", cuisine: "Pizza" }).explain()
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "$and" : [
                                {
                                        "borough" : {
                                                "$eq" : "Queens"
                                        }
                                },
                                {
                                        "cuisine" : {
                                                "$eq" : "Pizza"
                                        }
                                }
                        ]
                },
                "winningPlan" : {
                        "stage" : "COLLSCAN",
                        "filter" : {
                                "$and" : [
                                        {
                                                "borough" : {
                                                        "$eq" : "Queens"
                                                }
                                        },
                                        {
                                                "cuisine" : {
                                                        "$eq" : "Pizza"
                                                }
                                        }
                                ]
                        },
                        "direction" : "forward"
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-HQHM4EV",
                "port" : 27017,
                "version" : "3.6.2",
                "gitVersion" : "489d177dbd0f0420a8ca04d39fd78d0a2c539420"
        },
        "ok" : 1
}

5.	Create an index to make query from task 3.4 covered and provide proof (from explain() or Compass UI) that it is indeed covered
db.restaurants.createIndex( { "grades.8.score": 1, _id: -1, name: 1 } )
MongoDB Enterprise > db.restaurants.find({ $and: [ { "grades.8.score": { $lt: 7 } }, { "grades.8": { $exists: true } } ] }, {"_id": 0, "name": 1}).explain()
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "$and" : [
                                {
                                        "grades.8.score" : {
                                                "$lt" : 7
                                        }
                                },
                                {
                                        "grades.8" : {
                                                "$exists" : true
                                        }
                                }
                        ]
                },
                "winningPlan" : {
                        "stage" : "PROJECTION",
                        "transformBy" : {
                                "_id" : 0,
                                "name" : 1
                        },
                        "inputStage" : {
                                "stage" : "FETCH",
                                "filter" : {
                                        "grades.8" : {
                                                "$exists" : true
                                        }
                                },
                                "inputStage" : {
                                        "stage" : "IXSCAN",
                                        "keyPattern" : {
                                                "grades.8.score" : 1,
                                                "_id" : -1,
                                                "name" : 1
                                        },
                                        "indexName" : "grades.8.score_1__id_-1_name_1",
                                        "isMultiKey" : true,
                                        "multiKeyPaths" : {
                                                "grades.8.score" : [
                                                        "grades"
                                                ],
                                                "_id" : [ ],
                                                "name" : [ ]
                                        },
                                        "isUnique" : false,
                                        "isSparse" : false,
                                        "isPartial" : false,
                                        "indexVersion" : 2,
                                        "direction" : "forward",
                                        "indexBounds" : {
                                                "grades.8.score" : [
                                                        "[-inf.0, 7.0)"
                                                ],
                                                "_id" : [
                                                        "[MaxKey, MinKey]"
                                                ],
                                                "name" : [
                                                        "[MinKey, MaxKey]"
                                                ]
                                        }
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-HQHM4EV",
                "port" : 27017,
                "version" : "3.6.2",
                "gitVersion" : "489d177dbd0f0420a8ca04d39fd78d0a2c539420"
        },
        "ok" : 1
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

5.	Evaluation Criteria
1.	MongoDB has been installed and the collection has been imported
2.	Task 3 has been completed with mistakes, task 4 has not been completed
3.	Task 3 and 4 have been completed with mistakes
4.	Either task 3 or 4 has been completed or has minor issues
5.	Both tasks have been completed or have minor issues
